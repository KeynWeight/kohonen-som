name: Docker Build & Push

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    strategy:
      matrix:
        target: [api, cli, production]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true
      
      - name: Log in to Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.target }}
            type=ref,event=pr,suffix=-${{ matrix.target }}
            type=semver,pattern={{version}},suffix=-${{ matrix.target }}
            type=semver,pattern={{major}}.{{minor}},suffix=-${{ matrix.target }}
            type=raw,value=latest,suffix=-${{ matrix.target }},enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

  # Test Docker images work correctly
  test-docker:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'pull_request'
    
    strategy:
      matrix:
        target: [api, cli]
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          driver: docker-container
          install: true
      
      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: ${{ matrix.target }}
          load: true
          tags: kohonen-${{ matrix.target }}:test
          cache-from: type=gha
      
      - name: Test API container
        if: matrix.target == 'api'
        run: |
          # Start API container
          docker run -d --name test-api -p 8000:8000 kohonen-api:test
          sleep 10
          
          # Test health endpoint
          curl -f http://localhost:8000/health || exit 1
          
          # Test API info endpoint
          curl -f http://localhost:8000/ || exit 1
          
          # Stop container
          docker stop test-api
      
      - name: Test CLI container
        if: matrix.target == 'cli'
        run: |
          # Test CLI help
          docker run --rm kohonen-cli:test --help
          
          # Test CLI version (if available)
          docker run --rm kohonen-cli:test || true

  # Security scan for Docker images
  security-scan:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    
    strategy:
      matrix:
        target: [api, production]
    
    steps:
      - name: Check if image exists
        id: check-image
        continue-on-error: true
        run: |
          # Try to pull the image to verify it exists
          docker manifest inspect ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.target }} > /dev/null 2>&1
          echo "exists=$?" >> $GITHUB_OUTPUT
      
      - name: Run Trivy vulnerability scanner
        if: steps.check-image.outputs.exists == '0'
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}-${{ matrix.target }}
          format: 'sarif'
          output: 'trivy-results-${{ matrix.target }}.sarif'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: steps.check-image.outputs.exists == '0' && always()
        with:
          sarif_file: 'trivy-results-${{ matrix.target }}.sarif'